(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{414:function(t,s,a){"use strict";a.r(s);var e=a(43),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"다이나믹-필드-제작-방법"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#다이나믹-필드-제작-방법"}},[t._v("#")]),t._v(" 다이나믹 필드 제작 방법")]),t._v(" "),a("h2",{attrs:{id:"다이나믹-필드"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#다이나믹-필드"}},[t._v("#")]),t._v(" 다이나믹 필드")]),t._v(" "),a("p",[t._v("사이트 관리자가 사용자 입력 필드를 추가할 수 있는 기능을 제공합니다. 회원, 게시판 관리 페이지에서 기능을 제공하고 있습니다. 입력 필드 추가 기능은 다른 서드 파티 플러그인 에서도 제공할 수 있습니다.")]),t._v(" "),a("p",[t._v("다이나믹 필드는 다양한 형태를 제공할 수 있도록 설계되었습니다. AbstractType 클래스로 데이터를 처리하기 위한 형태만 제한하고 다이나믹 필드 제작자가 유연하게 구현할 수 있도록 했습니다. 다이나믹 필드는 데이터를 처리하는 _필드 타입_과 출력에 필요한 처리를 담당하는 필드 스킨 으로 구성 됩니다. 여기는 필드 타입 에 대한 설명입니다.")]),t._v(" "),a("h3",{attrs:{id:"abstracttype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstracttype"}},[t._v("#")]),t._v(" AbstractType")]),t._v(" "),a("p",[t._v("다이나믹 필드를 만들때 사용 되는 추상클래스 입니다. 모든 다이나믹 필드는 반드시 이 추상클래스를 사용합니다. 이것은 각 구현체가 제공하기 위한 필요한 데이터베이스 테이블 컬럼의 정의와 데이터를 처리하는데 집중할 수 있도록 해줍니다.")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractType")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Category")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractType")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("데이터베이스 테이블 생성,삭제 그리고 데이터 등록,수정,삭제 및 검색에 필요한 요소를 구현했습니다. 제작자는 다이나믹 필드의 이름, 설명, 데이터베이스 테이블 컬럼 구성등의 정보만 처리하여 새로운 필드를 만들 수 있습니다.")]),t._v(" "),a("h3",{attrs:{id:"빈-다이나믹-필드-생성-draft"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#빈-다이나믹-필드-생성-draft"}},[t._v("#")]),t._v(" 빈 다이나믹 필드 생성 (draft)")]),t._v(" "),a("p",[t._v("다이나믹 필드 생성 커맨드를 사용하려면 우선 플러그인이 마련되어 있어야 합니다. 플러그인 생성은 "),a("RouterLink",{attrs:{to:"/plugin-make-guide/start-make-plugin.html"}},[t._v("플러그인 개발 시작하기")]),t._v("를 참고 바랍니다.")],1),t._v(" "),a("p",[t._v("아래 커맨드로 빈 다이나믹 필드를 만들 수 있습니다.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ php artisan make:field <plugin> <name>\n")])])]),a("p",[a("code",[t._v("plugin")]),t._v("은 다이나믹 필드가 위치할 플러그인 이름입니다. 플러그인 디렉토리 명을 입력합니다."),a("br"),t._v(" "),a("code",[t._v("name")]),t._v("에는 다이나믹 필드의 아이디를 입력합니다.")]),t._v(" "),a("h4",{attrs:{id:"컴포넌트-아이디"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#컴포넌트-아이디"}},[t._v("#")]),t._v(" 컴포넌트 아이디")]),t._v(" "),a("p",[t._v("컴포넌트 아이디는 아래와 같은 규칙으로 작성합니다.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("fieldType/<plugin>@<name>\n")])])]),a("p",[a("code",[t._v("plugin")]),t._v("은 플러그인 디렉토리 이름이고 "),a("code",[t._v("name")]),t._v("는 다이나믹 필드의 아이디 입니다.")]),t._v(" "),a("h3",{attrs:{id:"다이나믹-필드-등록"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#다이나믹-필드-등록"}},[t._v("#")]),t._v(" 다이나믹 필드 등록")]),t._v(" "),a("p",[t._v("커맨드를 사용할 경우, 자동으로 등록됩니다. 플러그인의 "),a("code",[t._v("composer.json")]),t._v(" 파일에 아래와 같이 컴포넌트 정보가 등록되어 있습니다.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// plugins/my_plugin/composer.json")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"extra"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xpressengine"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"title"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my plugin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"component"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fieldType/my_plugin@my_field"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"class"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GilDongHong\\\\XePlugin\\\\MyPlugin\\\\DynamicFields\\\\MyField\\\\MyFieldField"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_field fieldType"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"description"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The fieldType supported by My_plugin plugin."')]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])])]),a("h3",{attrs:{id:"관리자-설정-페이지"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#관리자-설정-페이지"}},[t._v("#")]),t._v(" 관리자 설정 페이지")]),t._v(" "),a("p",[t._v("다이나믹 필드를 생성할 때 사용자로 부터 입력값이 필요하다면 "),a("code",[t._v("getSettingsView()")]),t._v(" 메소드를 구현 합니다. 제작자는 "),a("code",[t._v("$config")]),t._v("를 이용해 설정 입력 폼을 추가할 수 있습니다. 카테고리 다이나믹 필드("),a("code",[t._v("/app/FieldTypes/Category.php")]),t._v(") 클래스를 참고하세요.")])])}),[],!1,null,null,null);s.default=n.exports}}]);